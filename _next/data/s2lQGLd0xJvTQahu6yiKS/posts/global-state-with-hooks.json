{"pageProps":{"post":{"title":"Global state with hooks","date":1562871240000,"slug":"global-state-with-hooks","content":"<h2>backgrounds</h2>\n<p>Problems when manage global state with hooks and context api:</p>\n<p><a href=\"https://github.com/facebook/react/issues/15156#issuecomment-474590693\">Preventing rerenders with React.memo and useContext hook.</a></p>\n<h2>original idea</h2>\n<p><a href=\"https://medium.com/javascript-in-plain-english/state-management-with-react-hooks-no-redux-or-context-api-8b3035ceecf8\">State Management with React Hooks — No Redux or Context API</a></p>\n<h2>clear implantation with TS</h2>\n<p>useGlobalState.ts</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { useState, useEffect, Dispatch, SetStateAction } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\r\n\r\n<span class=\"hljs-keyword\">type</span> id&#x3C;T> = <span class=\"hljs-function\">(<span class=\"hljs-params\">a: T</span>) =></span> T\r\n\r\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">useGlobalState</span>&#x3C;<span class=\"hljs-title\">T</span>>(<span class=\"hljs-params\">initialState: T</span>) </span>{\r\n  <span class=\"hljs-keyword\">let</span> state = initialState\r\n  <span class=\"hljs-keyword\">let</span> listeners: <span class=\"hljs-built_in\">Array</span>&#x3C;Dispatch&#x3C;SetStateAction&#x3C;T>>> = []\r\n\r\n  <span class=\"hljs-keyword\">const</span> setState = <span class=\"hljs-function\">(<span class=\"hljs-params\">newState: T | id&#x3C;T></span>) =></span> {\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> newState === <span class=\"hljs-string\">'function'</span>) {\r\n      state = (newState <span class=\"hljs-keyword\">as</span> id&#x3C;T>)(state)\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      state = newState <span class=\"hljs-keyword\">as</span> T\r\n    }\r\n    listeners.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">listener</span> =></span> {\r\n      listener(state)\r\n    })\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">const</span> useCustom: <span class=\"hljs-function\">() =></span> [T, <span class=\"hljs-function\">(<span class=\"hljs-params\">state: T | id&#x3C;T></span>) =></span> <span class=\"hljs-built_in\">void</span>] = <span class=\"hljs-function\">() =></span> {\r\n    <span class=\"hljs-keyword\">const</span> newListener = useState(initialState)[<span class=\"hljs-number\">1</span>]\r\n    useEffect(<span class=\"hljs-function\">() =></span> {\r\n      listeners.push(newListener)\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> {\r\n        listeners = listeners.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">listener</span> =></span> listener !== newListener)\r\n      }\r\n      <span class=\"hljs-comment\">// eslint-disable-next-line react-hooks/exhaustive-deps</span>\r\n    }, [])\r\n    <span class=\"hljs-keyword\">return</span> [state, setState]\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> useCustom\r\n}</code></pre>\n<h2>usage</h2>\n<p>store.ts</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> useGlobalState <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./useGlobalState'</span>\r\n\r\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> useGlobalCount = useGlobalState(<span class=\"hljs-number\">0</span>)</code></pre>\n<p>A.tsx</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\r\n<span class=\"hljs-keyword\">import</span> { useGlobalCount } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../store'</span>\r\n<span class=\"hljs-keyword\">const</span> A: React.FC = <span class=\"hljs-function\">() =></span> {\r\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = useGlobalCount()\r\n  <span class=\"hljs-keyword\">return</span> (\r\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\r\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>A {count}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\r\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setCount(count + 1)}> + <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\r\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\r\n  )\r\n}\r\n\r\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> A</code></pre>\n<p>B.tsx</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\r\n<span class=\"hljs-keyword\">import</span> { useGlobalCount } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../store'</span>\r\n<span class=\"hljs-keyword\">const</span> B: React.FC = <span class=\"hljs-function\">() =></span> {\r\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = useGlobalCount()\r\n  <span class=\"hljs-keyword\">return</span> (\r\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\r\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>B {count}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\r\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> setCount(count - 1)}> - <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\r\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\r\n  )\r\n}\r\n\r\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> B</code></pre>\n<p>And you can also pass a object to <code>useGlobalState</code> and wrap it with mutations and actions in <code>store.ts</code>.</p>"},"prev":{"slug":"ray-casting-selecting","title":"在WebGL中使用射线选择模型","date":1534877523000},"next":{"slug":"cg","title":"我理解的计算机图形学","date":1576780980000}},"__N_SSG":true}