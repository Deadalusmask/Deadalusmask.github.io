{"pageProps":{"post":{"title":"我理解的计算机图形学","date":1576780980000,"slug":"cg","content":"<h2>backgrounds</h2>\n<p>首先需要明确的是，在现实世界中，被人眼/相机观测的到内容都是 2D 的，3D 是双眼效应（Binocular vision）和大脑脑补的结果，包括全息、VR 设备和 3D 电影。\n显示设备大多数也是输出 2D 图像（一些烟雾屏幕除外）。</p>\n<p>然后是二维图像，一张二维图像由许多像素点组成，每个像素点有自己的颜色，颜色可以由你定义的任何值表示，单通道的灰度图，三个数组成的 rgb 值，还可以附加一个透明度信息，可以使用别的颜色表示系统等。一张矩形的图像由宽*高个像素组成，那么我们的目的就是分别计算这些像素的颜色并将其显示在设备上。</p>\n<p>所以我们要做的是实现一个 <code>pixelData => color</code> 的函数（着色函数），然后输入渲染每个像素的需要的数据，就得到了每个像素的颜色。\n提供给着色函数的数据分为两类，一类是所有像素共享的，在一次渲染中一致的信息，常用的有当前时间，屏幕尺寸，图片纹理等。另一类是每个像素都不同的信息，主要是像素位置。</p>\n<h2>2d</h2>\n<p>下面是一个使用<code>div</code>作为显示终端渲染 2D 图形的简单实现，根据像素的位置信息 <code>p(x, y)</code> 以及给定的圆心和半径, 我们可以得到像素位置距圆心的距离，及此像素是否在圆内，然后就可以决定此像素是什么颜色。我们还可以根据当前时间<code>t</code>来变换半径的大小和颜色，效果如下。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> color = <span class=\"hljs-function\">(<span class=\"hljs-params\">r, g, b, a</span>) =></span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`rgba(<span class=\"hljs-subst\">${r * <span class=\"hljs-number\">255</span>}</span> , <span class=\"hljs-subst\">${g * <span class=\"hljs-number\">255</span>}</span>, <span class=\"hljs-subst\">${b * <span class=\"hljs-number\">255</span>}</span>, <span class=\"hljs-subst\">${a}</span>)`</span>\n}\n\n<span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'app'</span>)\n<span class=\"hljs-keyword\">const</span> width = <span class=\"hljs-number\">40</span>\n<span class=\"hljs-keyword\">const</span> height = <span class=\"hljs-number\">40</span>\ncontainer.style.width = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${width * <span class=\"hljs-number\">4</span>}</span>px`</span>\ncontainer.style.height = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${height * <span class=\"hljs-number\">4</span>}</span>px`</span>\n<span class=\"hljs-keyword\">const</span> pixels = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(width * height).fill(<span class=\"hljs-literal\">null</span>).map(<span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">const</span> pixel = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'div'</span>)\n  container.appendChild(pixel)\n  <span class=\"hljs-keyword\">return</span> pixel\n})\n\n<span class=\"hljs-keyword\">const</span> render = <span class=\"hljs-function\"><span class=\"hljs-params\">t</span> =></span> {\n  <span class=\"hljs-comment\">// circle</span>\n  <span class=\"hljs-keyword\">const</span> origin = [<span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">0.5</span>]\n  <span class=\"hljs-keyword\">const</span> ridus = <span class=\"hljs-built_in\">Math</span>.sin(t / <span class=\"hljs-number\">1000</span>) / <span class=\"hljs-number\">4</span> + <span class=\"hljs-number\">0.25</span>\n\n  pixels.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">v, i</span>) =></span> {\n    <span class=\"hljs-keyword\">const</span> p = [(i % height) / width, <span class=\"hljs-built_in\">Math</span>.floor(i / width) / height]\n    <span class=\"hljs-keyword\">let</span> res = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-comment\">// draw circle</span>\n    <span class=\"hljs-keyword\">const</span> l = <span class=\"hljs-built_in\">Math</span>.sqrt((p[<span class=\"hljs-number\">0</span>] - origin[<span class=\"hljs-number\">0</span>]) ** <span class=\"hljs-number\">2</span> + (p[<span class=\"hljs-number\">1</span>] - origin[<span class=\"hljs-number\">1</span>]) ** <span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">if</span> (l &#x3C; ridus) {\n      <span class=\"hljs-comment\">// inside circle</span>\n      <span class=\"hljs-keyword\">const</span> r = <span class=\"hljs-built_in\">Math</span>.sin(t / <span class=\"hljs-number\">1000</span>) / <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">0.5</span>\n      <span class=\"hljs-keyword\">const</span> g = <span class=\"hljs-built_in\">Math</span>.sin(t / <span class=\"hljs-number\">1000</span> + <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">0.5</span>\n      <span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-built_in\">Math</span>.sin(t / <span class=\"hljs-number\">1000</span> + <span class=\"hljs-number\">2</span>) / <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">0.5</span>\n      res = [r, g, b, <span class=\"hljs-number\">1</span>]\n    }\n\n    v.style.backgroundColor = color(...res)\n  })\n  requestAnimationFrame(render)\n}\nrequestAnimationFrame(render)</code></pre>\n<p><a href=\"https://codesandbox.io/s/2d-rendering-with-div-d1bc0\">Try it on CodeSandbox</a></p>\n<h2>3d</h2>\n<p>接下来是渲染 3D，我们将 3D 空间中的坐标投影在 2D 平面上。如果是正交投影, 当前像素的颜色就是在屏幕空间当前像素位置在屏幕法线方向上光线的颜色，如果是透视投影，当前像素的颜色就是视点位置在 <em>视点到像素位置</em> 的方向上的光线颜色。</p>\n<p>简单实现如下，球在 z 轴的位置根据时间移动，因为没有计算光线，直接使用了法线方向作为颜色输出，<code>rgb</code> 对应法线的 <code>xyz</code> 坐标</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> sphIntersect = <span class=\"hljs-function\">(<span class=\"hljs-params\">ro, rd, center, radius</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> oc = vec3.sub([], ro, center)\n  <span class=\"hljs-keyword\">const</span> b = vec3.dot(oc, rd)\n  <span class=\"hljs-keyword\">const</span> c = vec3.dot(oc, oc) - radius ** <span class=\"hljs-number\">2</span>\n  <span class=\"hljs-keyword\">let</span> h = b ** <span class=\"hljs-number\">2</span> - c\n\n  <span class=\"hljs-keyword\">if</span> (h &#x3C; <span class=\"hljs-number\">0.0</span>) {\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// no intersection</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    h = <span class=\"hljs-built_in\">Math</span>.sqrt(h)\n    <span class=\"hljs-keyword\">return</span> -b - h\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> render = <span class=\"hljs-function\"><span class=\"hljs-params\">t</span> =></span> {\n  pixels.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">v, i</span>) =></span> {\n    <span class=\"hljs-keyword\">let</span> res = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-keyword\">const</span> p = [(i % height) / width, <span class=\"hljs-built_in\">Math</span>.floor(i / width) / height] <span class=\"hljs-comment\">// 0 ~ 1</span>\n    p.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, i</span>) =></span> (p[i] = p[i] * <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>)) <span class=\"hljs-comment\">// -1 ~ 1</span>\n\n    <span class=\"hljs-comment\">// ortho</span>\n    <span class=\"hljs-comment\">// const ro = [p[0], p[1], 10]</span>\n    <span class=\"hljs-comment\">// const rd = [0, 0, -1]</span>\n\n    <span class=\"hljs-comment\">// perspective</span>\n    <span class=\"hljs-keyword\">const</span> ro = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>]\n    <span class=\"hljs-keyword\">let</span> rd = vec3.create()\n    vec3.sub(rd, [p[<span class=\"hljs-number\">0</span>], p[<span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">0</span>], ro)\n    vec3.normalize(rd, rd)\n\n    <span class=\"hljs-keyword\">const</span> center = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, (<span class=\"hljs-built_in\">Math</span>.sin(t / <span class=\"hljs-number\">1000</span>) / <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">0.5</span>) * <span class=\"hljs-number\">5</span>]\n    <span class=\"hljs-keyword\">const</span> radius = <span class=\"hljs-number\">0.3</span>\n    <span class=\"hljs-keyword\">const</span> d = sphIntersect(ro, rd, center, radius)\n    <span class=\"hljs-keyword\">if</span> (d > <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-comment\">// normal</span>\n      <span class=\"hljs-keyword\">const</span> nor = vec3.create()\n      <span class=\"hljs-comment\">// nor = normalize(ro + rd * d - center)</span>\n      vec3.add(nor, ro, vec3.scale(nor, rd, d))\n      vec3.normalize(nor, vec3.sub(nor, nor, center))\n      res = [...nor, <span class=\"hljs-number\">1</span>]\n    }\n\n    v.style.backgroundColor = color(...res)\n  })\n  requestAnimationFrame(render)\n}\nrequestAnimationFrame(render)</code></pre>\n<p><a href=\"https://codesandbox.io/s/3d-rendering-with-div-m9knk\">Try it on CodeSandbox</a></p>\n<p>WebGL</p>\n<h2>References</h2>\n<p><a href=\"https://thebookofshaders.com/\">The Book of Shaders</a></p>\n<p><a href=\"http://www.iquilezles.org/www/articles/spherefunctions/spherefunctions.htm\">sphere functions</a></p>"},"prev":{"slug":"global-state-with-hooks","title":"Global state with hooks","date":1562871240000},"next":null},"__N_SSG":true}